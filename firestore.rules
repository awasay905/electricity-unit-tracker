
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check if a user is authenticated
    function isSignedIn() {
      return request.auth != null;
    }

    // Helper function to check if the user is the owner of a document
    function isOwner(userId) {
      return request.auth.uid == userId;
    }

    // Helper function to get user data
    function getUserData(userId) {
      return get(/databases/$(database)/documents/users/$(userId)).data;
    }
    
    // Helper function to check if user belongs to a house
    function isHouseMember(houseId) {
        return isSignedIn() && getUserData(request.auth.uid).houseId == houseId;
    }

    // --- Rules ---

    // Users can only read/update their own document.
    match /users/{userId} {
      allow read, update: if isSignedIn() && isOwner(userId);
      allow create: if isSignedIn();
    }

    // House documents can be read by its members and updated only by the owner.
    match /houses/{houseId} {
      allow read: if isHouseMember(houseId);
      allow update: if isHouseMember(houseId) && getUserData(request.auth.uid).uid == resource.data.ownerId;
      // Anyone signed in can create a house
      allow create: if isSignedIn();
    }
    
    // Readings can be created and read by any member of the house.
    match /houses/{houseId}/readings/{readingId} {
        allow read, create: if isHouseMember(houseId);
    }

    // Join requests can be created by any signed-in user.
    // They can only be read by the owner of the house they are for.
    match /joinRequests/{requestId} {
        allow create: if isSignedIn();
        function isRequestForHouseOwner() {
            let houseId = request.resource.data.houseId;
            let houseData = get(/databases/$(database)/documents/houses/$(houseId)).data;
            return isSignedIn() && request.auth.uid == houseData.ownerId;
        }
        allow read, delete: if isRequestForHouseOwner();
    }
  }
}
