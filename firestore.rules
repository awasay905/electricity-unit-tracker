rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Users can read and write to their own user document.
    match /users/{userId} {
      allow read, write: if request.auth.uid == userId;
    }

    // House data can be read by its members and updated only by the owner.
    match /houses/{houseId} {
      function isMember() {
        return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId == houseId;
      }
      
      function isOwner() {
        return request.auth.uid == resource.data.ownerId;
      }

      allow read: if isMember();
      allow update: if isOwner();
      
      // Anyone authenticated can create a house. The ownerId must match the user creating it.
      allow create: if request.auth.uid != null && request.resource.data.ownerId == request.auth.uid;

      // Readings can be created and read by house members.
      match /readings/{readingId} {
        allow read, create: if isMember();
      }
    }

    // Join requests can be created by any authenticated user.
    // They can only be read/deleted by the owner of the requested house.
    match /joinRequests/{requestId} {
      function isRequestingHouseOwner() {
        let houseId = get(/databases/$(database)/documents/joinRequests/$(requestId)).data.houseId;
        let houseOwner = get(/databases/$(database)/documents/houses/$(houseId)).data.ownerId;
        return request.auth.uid == houseOwner;
      }
      
      allow create: if request.auth.uid != null;
      allow read, delete: if isRequestingHouseOwner();
    }
  }
}
