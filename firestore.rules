rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
  
    function isHouseMember(houseId) {
      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId == houseId;
    }
    
    function isHouseOwner(houseId) {
        return get(/databases/$(database)/documents/houses/$(houseId)).data.ownerId == request.auth.uid;
    }

    match /users/{userId} {
      // A user can only create their own user document.
      allow create: if request.auth.uid == userId;
      // A user can only read or update their own document.
      allow read, update: if request.auth.uid == userId;
    }

    match /houses/{houseId} {
      // Any member of a house can read its data.
      allow read: if isHouseMember(houseId);
      // A user creating a house must be its owner.
      allow create: if request.auth.uid == request.resource.data.ownerId;
      // Only the owner can update house details (name, goal, etc.).
      allow update: if isHouseOwner(houseId);
      
      match /readings/{readingId} {
        // Any house member can create and read readings for their house.
        allow read, create: if isHouseMember(houseId);
      }
    }
    
    match /joinRequests/{requestId} {
        // An authenticated user can create a request to join a house.
        allow create: if request.auth.uid != null;
        // Only the owner of the house can read the requests to join it.
        allow read: if isHouseOwner(request.resource.data.houseId);
        // Only the owner can approve or reject requests.
        allow delete: if isHouseOwner(get(/databases/$(database)/documents/joinRequests/$(requestId)).data.houseId);
    }
  }
}
