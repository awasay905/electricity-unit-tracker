
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user belongs to a specific house
    function isHouseMember(houseId) {
    

      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId == houseId;
    }
    


    // Users can only read/write their own user document
    match /users/{userId} {
      allow read, update: if request.auth.uid == userId;
      // A user can only create a document for themselves.
      allow create: if request.auth.uid == userId;
      
      // Allow authenticated users to read other user profiles if they share the same houseId.
      // This rule enables the getHouseMembers function to work.
      // The 'read' rule covers both single document reads and queries.
      allow read: if request.auth != null && resource.data.houseId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId;
    }

    // Rules for houses
    match /houses/{houseId} {
      // Any member of the house can read house data
      allow read: if isHouseMember(houseId);

      // Only the owner can update house details
      allow update: if isHouseMember(houseId) && resource.data.ownerId == request.auth.uid;
      
      // Any authenticated user can create a house. The associated user document update is handled by the /users/{userId} rule.
      allow create: if request.auth.uid != null;

      // Rules for readings subcollection
      match /readings/{readingId} {
        // Any member of the house can read and create readings
        allow read, create: if isHouseMember(houseId);
      }
    }
    
    // Rules for join requests
    match /joinRequests/{requestId} {
        // Users can create requests for themselves
        allow create: if request.auth.uid == request.resource.data.requesterId;
        // The owner of the house can read/delete the request
        allow read, delete: if isHouseMember(request.resource.data.houseId) && get(/databases/$(database)/documents/houses/$(request.resource.data.houseId)).data.ownerId == request.auth.uid;
    }
  }
}
