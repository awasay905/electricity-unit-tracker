
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    // Helper function to check if a user belongs to a specific house
    function isHouseMember(houseId) {
    

      return get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId == houseId;
    }
    


    // Users can only read/write their own user document
    match /users/{userId} {
      // Allow users to update their own document
      allow update: if request.auth.uid == userId;
      
      // A user can only create a document for themselves
      allow create: if request.auth.uid == userId;
      
      // Allow house owners to update houseId when approving join requests
      allow update: if request.auth != null 
        && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['houseId'])
        && exists(/databases/$(database)/documents/houses/$(request.resource.data.houseId))
        && get(/databases/$(database)/documents/houses/$(request.resource.data.houseId)).data.ownerId == request.auth.uid;
      
      // Allow authenticated users to read other user profiles if they share the same houseId
      // This rule enables the getHouseMembers function to work
      allow read: if request.auth != null && resource.data.houseId == get(/databases/$(database)/documents/users/$(request.auth.uid)).data.houseId;
    }

    // Rules for houses
    match /houses/{houseId} {
      // Allow reading house data if:
      // 1. User is a member of the house OR
      // 2. User is authenticated and querying by join code
      allow read: if isHouseMember(houseId) || 
        (request.auth != null && (
          // Allow direct document read
          resource.data.joinCode != null ||
          // Allow querying by join code
          ('joinCode' in request.query.filters)
        ));

      // Only the owner can update house details
      allow update: if isHouseMember(houseId) && resource.data.ownerId == request.auth.uid;
      
      // Any authenticated user can create a house. The associated user document update is handled by the /users/{userId} rule.
      allow create: if request.auth.uid != null;

      // Rules for readings subcollection
      match /readings/{readingId} {
        // Any member of the house can read and create readings
        allow read, create: if isHouseMember(houseId);
      }
    }
    
    // Rules for join requests
    match /joinRequests/{requestId} {
        // Users can create requests for themselves and the house must exist
        allow create: if request.auth.uid == request.resource.data.requesterId 
            && exists(/databases/$(database)/documents/houses/$(request.resource.data.houseId));
        
        // Requesters can read their own requests
        allow read: if request.auth.uid == resource.data.requesterId;
        
        // House owners can read, update and delete requests for their house
        allow read, update, delete: if resource.data.houseId != null 
            && exists(/databases/$(database)/documents/houses/$(resource.data.houseId))
            && get(/databases/$(database)/documents/houses/$(resource.data.houseId)).data.ownerId == request.auth.uid;
    }
  }
}
